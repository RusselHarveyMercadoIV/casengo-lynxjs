import * as __WEBPACK_EXTERNAL_MODULE_node_module_ab9f2194__ from "node:module";
import * as __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__ from "node:path";
import * as __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__ from "node:url";
import * as __WEBPACK_EXTERNAL_MODULE_deepmerge__ from "deepmerge";
import * as __WEBPACK_EXTERNAL_MODULE_reduce_configs_02786df6__ from "reduce-configs";
import * as __WEBPACK_EXTERNAL_MODULE__compiled_resolve_url_loader_index_js_fb9bad3b__ from "../compiled/resolve-url-loader/index.js";
let GLOBAL_PATCHED_SYMBOL = Symbol('GLOBAL_PATCHED_SYMBOL');
function patchGlobalLocation() {
    if (!global.location) {
        let location = Object.freeze({
            [GLOBAL_PATCHED_SYMBOL]: !0,
            href: (0, __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__.pathToFileURL)(process.cwd()).href + __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.sep
        });
        global.location = location;
    }
}
function unpatchGlobalLocation() {
    var _global_location;
    (null === (_global_location = global.location) || void 0 === _global_location ? void 0 : _global_location[GLOBAL_PATCHED_SYMBOL]) && delete global.location;
}
let getResolveUrlJoinFn = async ()=>{
    let { createJoinFunction, asGenerator, createJoinImplementation, defaultJoinGenerator } = __WEBPACK_EXTERNAL_MODULE__compiled_resolve_url_loader_index_js_fb9bad3b__.default;
    return createJoinFunction('rsbuild-resolve-join-fn', createJoinImplementation(asGenerator((item, ...rest)=>item.uri.startsWith('.') ? defaultJoinGenerator(item, ...rest) : [
            null
        ])));
}, src_dirname = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.dirname((0, __WEBPACK_EXTERNAL_MODULE_node_url_e96de089__.fileURLToPath)(import.meta.url)), src_require = (0, __WEBPACK_EXTERNAL_MODULE_node_module_ab9f2194__.createRequire)(import.meta.url), PLUGIN_SASS_NAME = 'rsbuild:sass', getSassLoaderOptions = (userOptions, isUseCssSourceMap)=>{
    let excludes = [], mergedOptions = (0, __WEBPACK_EXTERNAL_MODULE_reduce_configs_02786df6__.reduceConfigsWithContext)({
        initial: {
            sourceMap: isUseCssSourceMap,
            api: 'modern-compiler',
            implementation: src_require.resolve('sass-embedded'),
            sassOptions: {
                quietDeps: !0
            }
        },
        config: userOptions,
        ctx: {
            addExcludes: (items)=>{
                excludes.push(...Array.isArray(items) ? items : [
                    items
                ]);
            }
        },
        mergeFn: (defaults, userOptions)=>({
                ...defaults,
                ...userOptions,
                sassOptions: defaults.sassOptions && userOptions.sassOptions ? (0, __WEBPACK_EXTERNAL_MODULE_deepmerge__.default)(defaults.sassOptions, userOptions.sassOptions) : userOptions.sassOptions || defaults.sassOptions
            })
    });
    return mergedOptions.sassOptions ||= {}, mergedOptions.sassOptions.silenceDeprecations || (mergedOptions.sassOptions.silenceDeprecations = [
        'import'
    ], 'legacy' === mergedOptions.api && mergedOptions.sassOptions.silenceDeprecations.push('legacy-js-api')), {
        options: mergedOptions,
        excludes
    };
}, findRuleId = (chain, defaultId)=>{
    let id = defaultId, index = 0;
    for(; chain.module.rules.has(id);)id = `${defaultId}-${++index}`;
    return id;
}, pluginSass = (pluginOptions = {})=>({
        name: PLUGIN_SASS_NAME,
        setup (api) {
            let { rewriteUrls = !0, include = /\.s(?:a|c)ss$/ } = pluginOptions;
            api.onAfterCreateCompiler(({ compiler })=>{
                compiler.hooks.run.tap('PatchGlobalLocation', patchGlobalLocation), compiler.hooks.watchRun.tap('PatchGlobalLocation', patchGlobalLocation), compiler.hooks.watchClose.tap('PatchGlobalLocation', unpatchGlobalLocation), compiler.hooks.done.tap('PatchGlobalLocation', unpatchGlobalLocation);
            }), api.modifyBundlerChain(async (chain, { CHAIN_ID, environment })=>{
                var callback;
                let { config } = environment, { sourceMap } = config.output, isUseSourceMap = 'boolean' == typeof sourceMap ? sourceMap : sourceMap.css, { excludes, options } = getSassLoaderOptions(pluginOptions.sassLoaderOptions, !!rewriteUrls || isUseSourceMap), rule = chain.module.rule(findRuleId(chain, CHAIN_ID.RULE.SASS)).test(include).resourceQuery({
                    not: /raw|inline/
                }).sideEffects(!0).resolve.preferRelative(!0).end(), inlineRule = CHAIN_ID.RULE.CSS_INLINE && chain.module.rules.has(CHAIN_ID.RULE.CSS_INLINE) ? chain.module.rule(findRuleId(chain, CHAIN_ID.RULE.SASS_INLINE)).test(include).resourceQuery(/inline/) : null;
                chain.module.rule(CHAIN_ID.RULE.SASS_RAW).test(include).type('asset/source').resourceQuery(/raw/);
                let sassLoaderPath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.join(src_dirname, '../compiled/sass-loader/index.js'), resolveUrlLoaderPath = __WEBPACK_EXTERNAL_MODULE_node_path_c5b9b54f__.default.join(src_dirname, '../compiled/resolve-url-loader/index.js'), resolveUrlLoaderOptions = {
                    join: await getResolveUrlJoinFn(),
                    sourceMap: !1
                };
                (callback = (rule, type)=>{
                    for (let item of excludes)rule.exclude.add(item);
                    pluginOptions.exclude && rule.exclude.add(pluginOptions.exclude);
                    let cssRule = chain.module.rules.get('normal' === type ? CHAIN_ID.RULE.CSS : CHAIN_ID.RULE.CSS_INLINE);
                    for (let id of (rule.dependency(cssRule.get('dependency')), Object.keys(cssRule.uses.entries()))){
                        let loader = cssRule.uses.get(id), options = loader.get('options') ?? {}, clonedOptions = (0, __WEBPACK_EXTERNAL_MODULE_deepmerge__.default)({}, options);
                        id === CHAIN_ID.USE.CSS && (clonedOptions.importLoaders += rewriteUrls ? 2 : 1), rule.use(id).loader(loader.get('loader')).options(clonedOptions);
                    }
                    rewriteUrls && rule.use(CHAIN_ID.USE.RESOLVE_URL).loader(resolveUrlLoaderPath).options(resolveUrlLoaderOptions).end(), rule.use(CHAIN_ID.USE.SASS).loader(sassLoaderPath).options(options);
                })(rule, 'normal'), inlineRule && callback(inlineRule, 'inline');
            });
        }
    });
export { PLUGIN_SASS_NAME, pluginSass };
